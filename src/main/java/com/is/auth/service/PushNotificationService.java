package com.is.auth.service;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.messaging.FirebaseMessaging;
import com.google.firebase.messaging.Message;
import com.google.firebase.messaging.Notification;
import com.is.auth.model.UserFcmToken;
import com.is.auth.repository.UserFcmTokenRepository;
import com.is.auth.repository.UserAdditionalInfoRepository;
import com.is.auth.model.user.UserAdditionalInfo;
import com.is.events.model.Event;
import com.is.events.model.EventParticipant;
import com.is.events.model.enums.EventStatus;
import com.is.places.model.Place;
import com.is.places.repository.PlaceRepository;
import com.is.notification.service.NotificationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.HashSet;
import java.util.Set;

@Slf4j
@Service
@RequiredArgsConstructor
public class PushNotificationService {
    
    private FirebaseMessaging firebaseMessaging;
    private final UserFcmTokenRepository userFcmTokenRepository;
    private final PlaceRepository placeRepository;
    private final UserAdditionalInfoRepository userAdditionalInfoRepository;
    @Autowired
    private NotificationService notificationService;
    
    @Value("${firebase.service-account.path:firebase-service-account.json}")
    private String serviceAccountPath;
    
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy");
    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern("HH:mm");

    @PostConstruct
    public void initialize() {
        try {
            log.info("Initializing Firebase Admin SDK with service account from: {}", serviceAccountPath);
            
            InputStream serviceAccount = new ClassPathResource(serviceAccountPath).getInputStream();
            FirebaseOptions options = FirebaseOptions.builder()
                .setCredentials(GoogleCredentials.fromStream(serviceAccount))
                .build();
            
            if (FirebaseApp.getApps().isEmpty()) {
                FirebaseApp.initializeApp(options);
                log.info("Firebase App initialized successfully");
            } else {
                log.info("Firebase App already initialized");
            }
            
            this.firebaseMessaging = FirebaseMessaging.getInstance();
            log.info("Firebase Messaging instance created successfully");
        } catch (IOException e) {
            log.error("Failed to initialize Firebase Admin SDK. Error: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to initialize Firebase Admin SDK", e);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≤–µ–Ω—Ç—É
    public void sendParticipantJoinedNotification(Event event, EventParticipant participant) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏–≤–µ–Ω—Ç–∞
            List<UserFcmToken> organizerTokens = userFcmTokenRepository.findByUserId(event.getOrganizerEvent().getOrganizerId());
            
            for (UserFcmToken token : organizerTokens) {
                Message message = Message.builder()
                    .setToken(token.getToken())
                    .setNotification(Notification.builder()
                        .setTitle("–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫")
                        .setBody(String.format("%s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É —Å–æ–±—ã—Ç–∏—é \"%s\"", 
                            participant.getUser().getFirstName(), 
                            event.getSportEvent().getSportName()))
                        .build())
                    .putData("type", "PARTICIPANT_JOINED")
                    .putData("eventId", event.getEventId().toString())
                    .putData("participantId", participant.getUser().getUserId().toString())
                    .build();

                String response = firebaseMessaging.send(message);
                log.info("Successfully sent participant joined notification: {}", response);
            }
        } catch (Exception e) {
            log.error("Error sending participant joined notification", e);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≤–µ–Ω—Ç–∞
    public void sendParticipantLeftNotification(Event event, EventParticipant participant) {
        try {
            List<UserFcmToken> organizerTokens = userFcmTokenRepository.findByUserId(event.getOrganizerEvent().getOrganizerId());
            
            for (UserFcmToken token : organizerTokens) {
                Message message = Message.builder()
                    .setToken(token.getToken())
                    .setNotification(Notification.builder()
                        .setTitle("–£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª")
                        .setBody(String.format("%s %s –≤—ã—à–µ–ª –∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è \"%s\"", 
                            participant.getUser().getFirstName(),
                            participant.getUser().getLastName(),
                            event.getSportEvent().getSportName()))
                        .build())
                    .putData("type", "PARTICIPANT_LEFT")
                    .putData("eventId", event.getEventId().toString())
                    .putData("participantId", participant.getUser().getUserId().toString())
                    .build();

                String response = firebaseMessaging.send(message);
                log.info("Successfully sent participant left notification: {}", response);
            }
        } catch (Exception e) {
            log.error("Error sending participant left notification", e);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≤–µ–Ω—Ç–∞
    public void sendEventStatusChangeNotification(Event event, EventStatus newStatus) {
        try {
            Place place = placeRepository.findPlaceByPlaceId(event.getPlaceId());

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤–∫–ª—é—á–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞)
            Set<Long> userIds = new HashSet<>();
            if (event.getCurrentParticipants() != null && event.getCurrentParticipants().getParticipants() != null) {
                event.getCurrentParticipants().getParticipants().forEach(p -> userIds.add(p.getParticipantId()));
            }
            userIds.add(event.getOrganizerEvent().getOrganizerId());

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            String date = event.getDateTime().format(DATE_FORMATTER);
            String time = event.getDateTime().format(TIME_FORMATTER);

            // –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            Map<String, String> confirmedTexts = Map.of(
                "ru", String.format("–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ó–∞–≤–µ–¥–µ–Ω–∏–µ %s –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ %s –≤ %s. –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∏–≥—Ä–µ! ‚öΩÔ∏è", place.getName(), date, time),
                "uz", String.format("Ajoyib yangilik! %s joyi sizning broningizni %s kuni, soat %s ga tasdiqladi. O‚Äòyin uchun tayyorlaning! ‚öΩÔ∏è", place.getName(), date, time),
                "en", String.format("Great news! Venue %s has confirmed your booking for %s at %s. Get ready to play! ‚öΩÔ∏è", place.getName(), date, time)
            );
            Map<String, String> rejectedTexts = Map.of(
                "ru", String.format("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–≤–µ–¥–µ–Ω–∏–µ %s –æ—Ç–∫–ª–æ–Ω–∏–ª–æ –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –º–µ—Å—Ç–æ.", place.getName()),
                "uz", String.format("Afsuski, %s joyi sizning broningizni rad etdi. Iltimos, boshqa sana yoki joy tanlang.", place.getName()),
                "en", String.format("Unfortunately, venue %s has rejected your booking. Please try another date or place.", place.getName())
            );
            Map<String, String> changesTexts = Map.of(
                "ru", String.format("–ó–∞–≤–µ–¥–µ–Ω–∏–µ %s –∑–∞–ø—Ä–æ—Å–∏–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞—à–µ–º —Å–æ–±—ã—Ç–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ!", place.getName()),
                "uz", String.format("%s joyi tadbiringizda o‚Äòzgarishlarni so‚Äòradi. Tafsilotlarni tekshirib, tasdiqlang!", place.getName()),
                "en", String.format("Venue %s has requested changes to your event. Please check the details and confirm!", place.getName())
            );
            Map<String, String> pendingTexts = Map.of(
                "ru", String.format("–í—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –∏–≥—Ä–µ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ %s. –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è. –î–µ—Ä–∂–∏–º –∫—É–ª–∞—á–∫–∏! ü§û", place.getName()),
                "uz", String.format("O‚Äòyinga bir qadam yaqinroq! O‚Äòyin o‚Äòtkazish uchun so‚Äòrovingiz %s joyiga yuborildi. Javobni kutamiz. Omad tilaymiz! ü§û", place.getName()),
                "en", String.format("You‚Äôre one step closer to the game! Your request to host a game has been sent to %s. Waiting for the venue‚Äôs response. Fingers crossed! ü§û", place.getName())
            );
            Map<String, String> inProgressTexts = Map.of(
                "ru", "–ù—É —á—Ç–æ –∂, —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç–∞–ª! –í–∞—à–∞ –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ñ–µ–ª–∞–µ–º –∫—Ä—É—Ç—ã—Ö —ç–º–æ—Ü–∏–π –∏ –æ—Ç–ª–∏—á–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏! –£–¥–∞—á–∏ –Ω–∞ –ø–æ–ª–µ! ‚öΩÔ∏èüî•",
                "uz", "Mana shu lahza yetib keldi! O‚Äòyin hozir boshlanadi. Zo‚Äòr kayfiyat va yaxshi jamoa tilaymiz! Omad! ‚öΩÔ∏èüî•",
                "en", "The moment has come! Your game starts now. Wishing you great vibes and awesome teammates! Good luck on the field! ‚öΩÔ∏èüî•"
            );

            for (Long userId : userIds) {
                // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                String lang = "ru";
                try {
                    UserAdditionalInfo info = userAdditionalInfoRepository.findById(userId).orElse(null);
                    if (info != null && info.getLanguage() != null) {
                        lang = info.getLanguage();
                    }
                } catch (Exception ignored) {}

                String title = switch (lang) {
                    case "uz" -> "Tadbir holati o‚Äòzgardi";
                    case "en" -> "Event status updated";
                    default -> "–°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω";
                };
                String body = switch (newStatus) {
                    case CONFIRMED -> confirmedTexts.getOrDefault(lang, confirmedTexts.get("ru"));
                    case REJECTED -> rejectedTexts.getOrDefault(lang, rejectedTexts.get("ru"));
                    case CHANGES_REQUESTED -> changesTexts.getOrDefault(lang, changesTexts.get("ru"));
                    case CANCELLED -> rejectedTexts.getOrDefault(lang, changesTexts.get("ru"));
                    case PENDING_APPROVAL -> pendingTexts.getOrDefault(lang, pendingTexts.get("ru"));
                    case IN_PROGRESS -> inProgressTexts.getOrDefault(lang, inProgressTexts.get("ru"));
                    default -> switch (lang) {
                        case "uz" -> String.format("Tadbir holati %s ga o‚Äòzgardi", newStatus.name());
                        case "en" -> String.format("Event status changed to %s", newStatus.name());
                        default -> String.format("–°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s", newStatus.name());
                    };
                };

                List<UserFcmToken> tokens = userFcmTokenRepository.findByUserId(userId);
                for (UserFcmToken token : tokens) {
                    Message message = Message.builder()
                        .setToken(token.getToken())
                        .setNotification(Notification.builder()
                            .setTitle(title)
                            .setBody(body)
                            .build())
                        .putData("type", "EVENT_STATUS_CHANGED")
                        .putData("eventId", event.getEventId().toString())
                        .putData("newStatus", newStatus.name())
                        .build();

                    String response = firebaseMessaging.send(message);
                    log.info("Successfully sent event status change notification to user {}: {}", userId, response);
                }
            }
        } catch (Exception e) {
            log.error("Error sending event status change notification", e);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
    public void sendNewChatMessageNotification(Event event, String senderName, String messageText, Long senderId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≤–µ–Ω—Ç–∞, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            List<UserFcmToken> participantTokens = userFcmTokenRepository.findByEventIdAndUserIdNot(
                event.getEventId(), senderId);

            for (UserFcmToken token : participantTokens) {
                Message message = Message.builder()
                    .setToken(token.getToken())
                    .setNotification(Notification.builder()
                        .setTitle(String.format("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ \"%s\"", event.getSportEvent().getSportName()))
                        .setBody(String.format("%s: %s", senderName, messageText))
                        .build())
                    .putData("type", "NEW_CHAT_MESSAGE")
                    .putData("eventId", event.getEventId().toString())
                    .putData("senderId", senderId.toString())
                    .build();

                String response = firebaseMessaging.send(message);
                log.info("Successfully sent chat message notification: {}", response);
            }
        } catch (Exception e) {
            log.error("Error sending chat message notification", e);
        }
    }

    public void sendNewEventNotification(Event event) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —ç—Ç–æ—Ç –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            List<UserFcmToken> interestedUserTokens = userFcmTokenRepository.findByFavoriteSportId(
                event.getSportEvent().getSportId(),
                event.getOrganizerEvent().getOrganizerId() // –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
            );
            Place place = placeRepository.findPlaceByPlaceId(event.getPlaceId());
            LocalDateTime eventDateTime = event.getDateTime();
            String formattedDate = eventDateTime.format(DATE_FORMATTER);
            String formattedTime = eventDateTime.format(TIME_FORMATTER);
            String title = "üéØ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ –≤–∞—à–µ–º—É –ª—é–±–∏–º–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞!";
            String body = String.format("üëã –≠–π! –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –≤ %s!\n\nüèüÔ∏è –ú–µ—Å—Ç–æ: %s\nüìÖ –î–∞—Ç–∞: %s\n‚è∞ –í—Ä–µ–º—è: %s\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∏–≥—Ä–µ! üéÆ",
                event.getSportEvent().getSportName(),
                place.getName(),
                formattedDate,
                formattedTime);
            for (UserFcmToken token : interestedUserTokens) {
                Message message = Message.builder()
                    .setToken(token.getToken())
                    .setNotification(Notification.builder()
                        .setTitle(title)
                        .setBody(body)
                        .build())
                    .putData("type", "NEW_EVENT")
                    .putData("eventId", event.getEventId().toString())
                    .putData("sportId", event.getSportEvent().getSportId().toString())
                    .putData("placeId", event.getPlaceId().toString())
                    .putData("deepLink", String.format("placeandplay://event/%d", event.getEventId()))
                    .putData("click_action", "FLUTTER_NOTIFICATION_CLICK")
                    .build();
                String response = firebaseMessaging.send(message);
                log.info("Successfully sent new event notification: {}", response);
                // –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                notificationService.createNotification(
                    token.getUserId(),
                    "NEW_EVENT",
                    title,
                    body,
                    Map.of(
                        "eventId", event.getEventId(),
                        "sportId", event.getSportEvent().getSportId(),
                        "placeId", event.getPlaceId()
                    )
                );
            }
        } catch (Exception e) {
            log.error("Error sending new event notification", e);
        }
    }

    public void sendSimpleNotification(Long userId, String title, String body, String type) {
        try {
            List<UserFcmToken> tokens = userFcmTokenRepository.findByUserId(userId);
            for (UserFcmToken token : tokens) {
                Message message = Message.builder()
                    .setToken(token.getToken())
                    .setNotification(Notification.builder()
                        .setTitle(title)
                        .setBody(body)
                        .build())
                    .putData("type", type)
                    .build();
                String response = firebaseMessaging.send(message);
                log.info("Successfully sent simple notification: {}", response);
            }
        } catch (Exception e) {
            log.error("Error sending simple notification", e);
        }
    }
} 