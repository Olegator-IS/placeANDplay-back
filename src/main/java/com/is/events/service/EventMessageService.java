package com.is.events.service;

import com.is.events.model.Event;
import com.is.events.model.enums.EventMessageType;
import com.is.events.model.enums.EventStatus;
import com.is.events.model.chat.ChatMessageRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.format.DateTimeFormatter;
import java.util.Locale;

@Service
@RequiredArgsConstructor
@Slf4j
public class EventMessageService {

    private final ChatService chatService;

    private static final DateTimeFormatter DATE_FORMATTER = 
        DateTimeFormatter.ofPattern("dd MMMM yyyy '–≤' HH:mm", new Locale("ru"));

    public void sendEventMessage(Event event, EventMessageType messageType, String participantName, String language) {
        String message;
        switch (messageType) {
            case EVENT_CREATED -> message = String.format(
                "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä %s —Å–æ–∑–¥–∞–ª –∏–≤–µ–Ω—Ç –Ω–∞ %s. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã %s.",
                event.getOrganizerEvent().getOrganizerName(),
                event.getDateTime().format(DATE_FORMATTER),
                getPlaceName(event.getPlaceId())
            );
            case STATUS_CHANGED -> {
                if (event.getStatus() == EventStatus.CONFIRMED) {
                    message = String.format(
                        "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –ü–û–î–¢–í–ï–†–ñ–î–Å–ù. –ò–≤–µ–Ω—Ç –Ω–∞—á–Ω–µ—Ç—Å—è %s. " +
                        "–ü–æ–∫–∏–Ω—É—Ç—å —Å–æ–±—ã—Ç–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–µ –ø–æ–∑–∂–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞!",
                        event.getDateTime().format(DATE_FORMATTER)
                    );
                } else {
                    message = String.format(
                        "–°—Ç–∞—Ç—É—Å –∏–≤–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s",
                        event.getStatus().name()
                    );
                }
            }
            case EVENT_EXPIRED -> message = String.format(
                    "–°–æ–±—ã—Ç–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ,—Ç.–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.",
                    participantName
            );
            case PARTICIPANT_JOINED -> message = String.format(
                "%s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≤–µ–Ω—Ç—É.",
                participantName
            );
            case PARTICIPANT_LEFT -> message = String.format(
                "%s –ø–æ–∫–∏–Ω—É–ª –∏–≤–µ–Ω—Ç.",
                participantName
            );
            case EVENT_STARTED -> message = "üéâ –ò–≤–µ–Ω—Ç –Ω–∞—á–∞–ª—Å—è! –ñ–µ–ª–∞–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ª–∏—á–Ω–æ–π –∏–≥—Ä—ã –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üèÜ";
            case PARTICIPANT_CHECKED_IN -> message = String.format(
                "%s –æ—Ç–º–µ—Ç–∏–ª —Å–≤–æ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ –∏–≤–µ–Ω—Ç–µ!",
                participantName
            );
            default -> message = "–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ";
        }

        Long systemId = 0L;
        String accessTokenSystem = "SYSTEM";
        String refreshTokenSystem = "SYSTEM";
        
        ChatMessageRequest chatRequest = new ChatMessageRequest();
        chatRequest.setContent(message);
        chatService.sendMessage(event.getEventId(), systemId, chatRequest, accessTokenSystem, refreshTokenSystem, language);
        log.info("Sent event message: {}", message);
    }

    private String getPlaceName(Long placeId) {
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ ID
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≤–µ–¥–µ–Ω–∏—è–º–∏
        return "–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è"; // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    }
} 